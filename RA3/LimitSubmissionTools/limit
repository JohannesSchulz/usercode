#!/bin/bash

STEPS=100
EXE=combine
MODEL="${1##*/}"
OPTIONS='-M HybridNew --frequentist'
RESULT="$MODEL.result.txt"
LOG_ASYMPTOTIC='asymptotic.log'

rm -f $RESULT
touch $RESULT

#####################################################################
# Default scale used by float functions.
float_scale=4


#####################################################################
# Evaluate a floating point number expression.
function float_eval()
{
    local stat=0
    local result=0.0
    if [[ $# -gt 0 ]]; then
        result=$(echo "scale=$float_scale; $*" | bc -q 2>/dev/null)
        stat=$?
        if [[ $stat -eq 0  &&  -z "$result" ]]; then stat=1; fi
    fi
    echo $result
    return $stat
}


#####################################################################
# Evaluate a floating point number conditional expression.
function float_cond()
{
    local cond=0
    if [[ $# -gt 0 ]]; then
        cond=$(echo "$*" | bc -q 2>/dev/null)
        if [[ -z "$cond" ]]; then cond=0; fi
        if [[ "$cond" != 0  &&  "$cond" != 1 ]]; then cond=0; fi
    fi
    local stat=$((cond == 0))
    echo $stat
    return $stat
}

#Calculate asymptotic CLs x-section limits
$EXE -M Asymptotic $1 > $LOG_ASYMPTOTIC
OBSas=`grep "Observed Limit: r <" $LOG_ASYMPTOTIC | cut -b 21-`
EXPas=`grep "Expected 50.0%: r <" $LOG_ASYMPTOTIC | cut -b 21-`
EXPm2as=`grep "Expected  2.5%: r <" $LOG_ASYMPTOTIC | cut -b 21-`
EXPm1as=`grep "Expected 16.0%: r <" $LOG_ASYMPTOTIC | cut -b 21-`
EXPp1as=`grep "Expected 84.0%: r <" $LOG_ASYMPTOTIC | cut -b 21-`
EXPp2as=`grep "Expected 97.5%: r <" $LOG_ASYMPTOTIC | cut -b 21-`

echo "# $MODEL" >> $RESULT
echo "" >> $RESULT
echo "gluino = `cat $1 | grep 'gluino' | cut -d '=' -f 2`" >> $RESULT
echo "squark = `cat $1 | grep 'squark' | cut -d '=' -f 2`" >> $RESULT
echo "chi1 = `cat $1 | grep 'chi1' | cut -d '=' -f 2`" >> $RESULT
echo "Luminosity = `cat $1 | grep 'Luminosity' | cut -d '=' -f 2`" >> $RESULT
echo "Xsection.LO = `cat $1 | grep 'Xsection.LO' | cut -d '=' -f 2`" >> $RESULT
echo "Xsection.NLO = `cat $1 | grep 'Xsection.NLO' | cut -d '=' -f 2`" >> $RESULT
echo "" >> $RESULT
echo "CLs observed asymptotic = $OBSas" >> $RESULT
echo "CLs expected asymptotic = $EXPas" >> $RESULT
echo "CLs expected m2sigma asymptotic = $EXPm2as" >> $RESULT
echo "CLs expected m1sigma asymptotic = $EXPm1as" >> $RESULT
echo "CLs expected p1sigma asymptotic = $EXPp1as" >> $RESULT
echo "CLs expected p2sigma asymptotic = $EXPp2as" >> $RESULT
echo "" >> $RESULT
cat $RESULT

range=`echo "scale=4; $EXPp2as-$EXPm2as" | bc`
step=`echo "scale=4; $range/$STEPS" | bc`

#create grid around the asymptotic limits
i=$EXPm2as
n=1
#set -f
while [ $(float_cond "$i <= $EXPp2as") == 0 ]
do
  echo "Point $n of $STEPS, testing r=$i"
  $EXE $OPTIONS --saveToys --saveHybridResult --clsAcc 0 -s -1 -n $MODEL --singlePoint $i $1
  i=$(float_eval "$i + $step" )
  n=$(($n+1))
done

#calculate from grid obs and exp CLS hybrid limits
echo "hadd $MODEL.root higgsCombine$MODEL.*.root"
hadd $MODEL.root higgsCombine$MODEL.*.root
echo "$EXE $1 $OPTIONS --grid=$MODEL.root > $MODEL.obs.log"
$EXE $1 $OPTIONS --grid=$MODEL.root > $MODEL.obs.log
$EXE $1 $OPTIONS --grid=$MODEL.root --expectedFromGrid 0.5 > $MODEL.exp.log
$EXE $1 $OPTIONS --grid=$MODEL.root --expectedFromGrid 0.025 > $MODEL.exp.m2.log
$EXE $1 $OPTIONS --grid=$MODEL.root --expectedFromGrid 0.16 > $MODEL.exp.m1.log
$EXE $1 $OPTIONS --grid=$MODEL.root --expectedFromGrid 0.84 > $MODEL.exp.p1.log
$EXE $1 $OPTIONS --grid=$MODEL.root --expectedFromGrid 0.975 > $MODEL.exp.p2.log
CLsObs=`cat $MODEL.obs.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsObsError=`cat $MODEL.obs.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`
CLsExp=`cat $MODEL.exp.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsExpError=`cat $MODEL.exp.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`
CLsExpM2=`cat $MODEL.exp.m2.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsExpM2Error=`cat $MODEL.exp.m2.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`
CLsExpM1=`cat $MODEL.exp.m1.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsExpM1Error=`cat $MODEL.exp.m1.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`
CLsExpP2=`cat $MODEL.exp.p2.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsExpP2Error=`cat $MODEL.exp.p2.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`
CLsExpP1=`cat $MODEL.exp.p1.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 4`
CLsExpP1Error=`cat $MODEL.exp.p1.log | tail -n 3 | grep "Limit: r <" | cut -d ' ' -f 6`

echo "CLs observed = $CLsObs" >> $RESULT
echo "CLs observed error= $CLsObsError" >> $RESULT
echo "CLs expected = $CLsExp" >> $RESULT
echo "CLs expected error= $CLsExpError" >> $RESULT
echo "CLs expected m2sigma = $CLsExpM2" >> $RESULT
echo "CLs expected m2sigma error= $CLsExpM2Error" >> $RESULT
echo "CLs expected m1sigma = $CLsExpM1" >> $RESULT
echo "CLs expected m1sigma error= $CLsExpM1Error" >> $RESULT
echo "CLs expected p1sigma = $CLsExpP1" >> $RESULT
echo "CLs expected p1sigma error= $CLsExpP1Error" >> $RESULT
echo "CLs expected p2sigma = $CLsExpP2" >> $RESULT
echo "CLs expected p2sigma error= $CLsExpP2Error" >> $RESULT

cat $RESULT
