#include "SusyScan.h"
#include "ConfigFile.h"

SusyScan::SusyScan(std::string filename)
{
  ConfigFile config(filename);
  Mzero 	= config.read<double>("Mzero", 0);
  Mhalf	 	= config.read<double>("Mhalf", 0);
  Mu 		= config.read<double>("Mu", 0);
  TanBeta 	= config.read<double>("TanBeta", 0);
  Azero 	= config.read<double>("Azero", 0);
  Run 		= config.read<double>("Run", 0);
  background 	= config.read<double>("background", 0);
  background_uncertainty = config.read<double>("background.uncertainty", 0);
  data 		= config.read<double>("data", 0);
  signal_JEC_UP 	= config.read<double>("signal.JEC_.UP", 0);
  signal_JEC_DN 	= config.read<double>("signal.JEC_.DN", 0);
  signal_MuIso_UP 	= config.read<double>("signal.MuIso_.UP", 0);
  signal_MuIso_DN 	= config.read<double>("signal.MuIso_.DN", 0);
  signal_kfactor_UP 	= config.read<double>("signal.kFactorUP", 0);
  signal_kfactor_DN 	= config.read<double>("signal.kFactorDN", 0);
  signal_kfactor   	= config.read<double>("signal.kFactor", 0);

  signal_contamination 	= config.read<double>("signal.LO.signalregion.IsoMuon", 10);
  signal 	= config.read<double>("signal.LO", 0);
  signal_uncertainty = config.read<double>("signal.LO.uncertainty", 0);
  Xsection 	= config.read<double>("Xsection", 0);
  ExpXsecLimit 	= config.read<double>("LO.ExpXsecLimit", 0);
  ObsXsecLimit 	= config.read<double>("LO.ObsXsecLimit", 0);
  ExpNsigLimit 	= config.read<double>("LO.ExpNsigLimit", 0);
  ObsNsigLimit 	= config.read<double>("LO.ObsNsigLimit", 0);
  lnQ_b_exp 	= config.read<double>("LO.-2lnQ_b@exp", 0);
  lnQ_b_obs 	= config.read<double>("LO.-2lnQ_b@obs", 0);
  lnQ_b_xsec 	= config.read<double>("LO.-2lnQ_b@xsec", 0);
  lnQ_sb_exp 	= config.read<double>("LO.-2lnQ_sb@exp", 0);
  lnQ_sb_obs 	= config.read<double>("LO.-2lnQ_sb@obs", 0);
  lnQ_sb_xsec 	= config.read<double>("LO.-2lnQ_sb@xsec", 0);
  CLb_b_exp 	= config.read<double>("LO.CLb_b@exp", 0);
  CLb_b_obs 	= config.read<double>("LO.CLb_b@obs", 0);
  CLb_b_xsec 	= config.read<double>("LO.CLb_b@xsec", 0);
  CLs_exp 	= config.read<double>("LO.CLs@exp", 0);
  CLs_obs 	= config.read<double>("LO.CLs@obs", 0);
  CLs_xsec 	= config.read<double>("LO.CLs@xsec", 0);
  CLs_b_exp 	= config.read<double>("LO.CLs_b@exp", 0);
  CLs_b_obs 	= config.read<double>("LO.CLs_b@obs", 0);
  CLs_b_xsec 	= config.read<double>("LO.CLs_b@xsec", 0);
  CLs_b_n1_exp 	= config.read<double>("LO.CLs_b_n1@exp", 0);
  CLs_b_n1_obs 	= config.read<double>("LO.CLs_b_n1@obs", 0);
  CLs_b_n1_xsec = config.read<double>("LO.CLs_b_n1@xsec", 0);
  CLs_b_n2_exp 	= config.read<double>("LO.CLs_b_n2@exp", 0);
  CLs_b_n2_obs 	= config.read<double>("LO.CLs_b_n2@obs", 0);
  CLs_b_n2_xsec	= config.read<double>("LO.CLs_b_n2@xsec", 0);
  CLs_b_p1_exp 	= config.read<double>("LO.CLs_b_p1@exp", 0);
  CLs_b_p1_obs 	= config.read<double>("LO.CLs_b_p1@obs", 0);
  CLs_b_p1_xsec	= config.read<double>("LO.CLs_b_p1@xsec", 0);
  CLs_b_p2_exp 	= config.read<double>("LO.CLs_b_p2@exp", 0);
  CLs_b_p2_obs 	= config.read<double>("LO.CLs_b_p2@obs", 0);
  CLs_b_p2_xsec	= config.read<double>("LO.CLs_b_p2@xsec", 0);
  CLsb_b_exp 	= config.read<double>("LO.CLsb_b@exp", 0);
  CLsb_b_obs 	= config.read<double>("LO.CLsb_b@obs", 0);
  CLsb_b_xsec	= config.read<double>("LO.CLsb_b@xsec", 0);
  PLExpXsecLimit= config.read<double>("RooSimpleProfile.xsec.LO.ExpUpperLimit", 0);
  PLObsXsecLimit= config.read<double>("RooSimpleProfile.xsec.LO.ObsUpperLimit", 0);
  PLExpNsigLimit= config.read<double>("RooSimpleProfile.signal.LO.ExpUpperLimit", 0);
  PLObsNsigLimit= config.read<double>("RooSimpleProfile.signal.LO.ObsUpperLimit", 0);
  FCExpXsecLimit= config.read<double>("RooFC.xsec.LO.ExpUpperLimit", 0);
  FCObsXsecLimit= config.read<double>("RooFC.xsec.LO.ObsUpperLimit", 0);
  FCExpNsigLimit= config.read<double>("RooFC.signal.LO.ExpUpperLimit", 0);
  FCObsNsigLimit= config.read<double>("RooFC.signal.LO.ObsUpperLimit", 0);
  MCMCExpXsecLimit= config.read<double>("RooMCMC.xsec.LO.ExpUpperLimit", 0);
  MCMCObsXsecLimit= config.read<double>("RooMCMC.xsec.LO.ObsUpperLimit", 0);
  MCMCExpNsigLimit= config.read<double>("RooMCMC.signal.LO.ExpUpperLimit", 0);
  MCMCObsNsigLimit= config.read<double>("RooMCMC.signal.LO.ObsUpperLimit", 0);

  NLO_ExpXsecLimit 	= config.read<double>("NLO.ExpXsecLimit", 0);
  NLO_ObsXsecLimit 	= config.read<double>("NLO.ObsXsecLimit", 0);
  NLO_ExpNsigLimit 	= config.read<double>("NLO.ExpNsigLimit", 0);
  NLO_ObsNsigLimit 	= config.read<double>("NLO.ObsNsigLimit", 0);
  NLO_lnQ_b_exp 	= config.read<double>("NLO.-2lnQ_b@exp", 0);
  NLO_lnQ_b_obs 	= config.read<double>("NLO.-2lnQ_b@obs", 0);
  NLO_lnQ_b_xsec 	= config.read<double>("NLO.-2lnQ_b@xsec", 0);
  NLO_lnQ_sb_exp 	= config.read<double>("NLO.-2lnQ_sb@exp", 0);
  NLO_lnQ_sb_obs 	= config.read<double>("NLO.-2lnQ_sb@obs", 0);
  NLO_lnQ_sb_xsec 	= config.read<double>("NLO.-2lnQ_sb@xsec", 0);
  NLO_CLb_b_exp 	= config.read<double>("NLO.CLb_b@exp", 0);
  NLO_CLb_b_obs 	= config.read<double>("NLO.CLb_b@obs", 0);
  NLO_CLb_b_xsec 	= config.read<double>("NLO.CLb_b@xsec", 0);
  NLO_CLs_exp 	= config.read<double>("NLO.CLs@exp", 0);
  NLO_CLs_obs 	= config.read<double>("NLO.CLs@obs", 0);
  NLO_CLs_xsec 	= config.read<double>("NLO.CLs@xsec", 0);
  NLO_CLs_b_exp 	= config.read<double>("NLO.CLs_b@exp", 0);
  NLO_CLs_b_obs 	= config.read<double>("NLO.CLs_b@obs", 0);
  NLO_CLs_b_xsec 	= config.read<double>("NLO.CLs_b@xsec", 0);
  NLO_CLs_b_n1_exp 	= config.read<double>("NLO.CLs_b_n1@exp", 0);
  NLO_CLs_b_n1_obs 	= config.read<double>("NLO.CLs_b_n1@obs", 0);
  NLO_CLs_b_n1_xsec = config.read<double>("NLO.CLs_b_n1@xsec", 0);
  NLO_CLs_b_n2_exp 	= config.read<double>("NLO.CLs_b_n2@exp", 0);
  NLO_CLs_b_n2_obs 	= config.read<double>("NLO.CLs_b_n2@obs", 0);
  NLO_CLs_b_n2_xsec	= config.read<double>("NLO.CLs_b_n2@xsec", 0);
  NLO_CLs_b_p1_exp 	= config.read<double>("NLO.CLs_b_p1@exp", 0);
  NLO_CLs_b_p1_obs 	= config.read<double>("NLO.CLs_b_p1@obs", 0);
  NLO_CLs_b_p1_xsec	= config.read<double>("NLO.CLs_b_p1@xsec", 0);
  NLO_CLs_b_p2_exp 	= config.read<double>("NLO.CLs_b_p2@exp", 0);
  NLO_CLs_b_p2_obs 	= config.read<double>("NLO.CLs_b_p2@obs", 0);
  NLO_CLs_b_p2_xsec	= config.read<double>("NLO.CLs_b_p2@xsec", 0);
  NLO_CLsb_b_exp 	= config.read<double>("NLO.CLsb_b@exp", 0);
  NLO_CLsb_b_obs 	= config.read<double>("NLO.CLsb_b@obs", 0);
  NLO_CLsb_b_xsec	= config.read<double>("NLO.CLsb_b@xsec", 0);
  NLO_PLExpXsecLimit= config.read<double>("RooSimpleProfile.xsec.NLO.ExpUpperLimit", 0);
  NLO_PLObsXsecLimit= config.read<double>("RooSimpleProfile.xsec.NLO.ObsUpperLimit", 0);
  NLO_PLExpNsigLimit= config.read<double>("RooSimpleProfile.signal.NLO.ExpUpperLimit", 0);
  NLO_PLObsNsigLimit= config.read<double>("RooSimpleProfile.signal.NLO.ObsUpperLimit", 0);
  NLO_FCExpXsecLimit= config.read<double>("RooFC.xsec.NLO.ExpUpperLimit", 0);
  NLO_FCObsXsecLimit= config.read<double>("RooFC.xsec.NLO.ObsUpperLimit", 0);
  NLO_FCExpNsigLimit= config.read<double>("RooFC.signal.NLO.ExpUpperLimit", 0);
  NLO_FCObsNsigLimit= config.read<double>("RooFC.signal.NLO.ObsUpperLimit", 0);
  NLO_MCMCExpXsecLimit= config.read<double>("RooMCMC.xsec.NLO.ExpUpperLimit", 0);
  NLO_MCMCObsXsecLimit= config.read<double>("RooMCMC.xsec.NLO.ObsUpperLimit", 0);
  NLO_MCMCExpNsigLimit= config.read<double>("RooMCMC.signal.NLO.ExpUpperLimit", 0);
  NLO_MCMCObsNsigLimit= config.read<double>("RooMCMC.signal.NLO.ObsUpperLimit", 0);
}
